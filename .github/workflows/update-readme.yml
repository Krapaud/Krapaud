name: Update README with GitHub Stats

on:
  schedule:
    # Mise √† jour automatique tous les jours √† 6h UTC
    - cron: '0 6 * * *'
  push:
    branches: [ main ]
  workflow_dispatch: # Permet de d√©clencher manuellement

jobs:
  update-readme:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Update README timestamp only
      run: |
        # Mettre √† jour uniquement le timestamp
        python3 << 'PYTHON_SCRIPT'
        import re
        from datetime import datetime
        
        # Lire le README actuel
        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # G√©n√©rer le timestamp de mise √† jour
        update_time = datetime.now().strftime('%d/%m/%Y √† %H:%M UTC')
        
        # Mettre √† jour uniquement le timestamp dans le README
        content = re.sub(
            r'<!--STATS_UPDATE_TIME-->.*?<!--/STATS_UPDATE_TIME-->',
            f'<!--STATS_UPDATE_TIME-->{update_time}<!--/STATS_UPDATE_TIME-->',
            content
        )
        
        # √âcrire le nouveau contenu
        with open('README.md', 'w', encoding='utf-8') as f:
            f.write(content)
            
        print(f"‚úÖ Timestamp mis √† jour: {update_time}")
        PYTHON_SCRIPT

    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # V√©rifier s'il y a des changements
        if git diff --quiet; then
          echo "Aucun changement d√©tect√©"
        else
          git add README.md
          git commit -m "ü§ñ Mise √† jour automatique des statistiques GitHub - $(date '+%d/%m/%Y %H:%M')"
          git push
          echo "README mis √† jour avec succ√®s !"
        fi
