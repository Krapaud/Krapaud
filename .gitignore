# =============================================================================
# PYTHON
# =============================================================================

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*.pyc
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# =============================================================================
# VIRTUAL ENVIRONMENTS & PACKAGE MANAGERS
# =============================================================================

# Environments
.env
.env.*
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Conda environments
*.conda
.conda/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# =============================================================================
# EDITORS & IDEs
# =============================================================================

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following:
.idea/

# VSCode
.vscode/
*.code-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

# =============================================================================
# OPERATING SYSTEMS
# =============================================================================

# macOS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes

# Windows
ehthumbs.db
Thumbs.db
Desktop.ini

# Linux
*~

# =============================================================================
# SECURITY & SECRETS
# =============================================================================

# Environment variables and secrets
.env
.env.*
.env.local
.env.*.local
.secrets

# API keys and certificates
*.key
*.pem
*.p12
*.pfx
config.json
secrets.json
*.crt
*.csr

# SSH keys
id_rsa
id_rsa.pub
id_ed25519
id_ed25519.pub

# =============================================================================
# DATABASES
# =============================================================================

# SQLite
*.db
*.sqlite
*.sqlite3
*.db-journal

# PostgreSQL
*.sql

# =============================================================================
# DEVELOPMENT & BUILD
# =============================================================================

# Temporary files
*.tmp
*.temp
*.bak
*.backup
*~

# Log files
*.log
logs/

# Node.js (si vous utilisez des outils Node.js)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Custom project files
stats_update.md
*.backup

# Docker
.dockerignore
Dockerfile.local
docker-compose.override.yml

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl

# =============================================================================
# ARCHIVES & COMPILED FILES
# =============================================================================

# Archives
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# Compiled source
*.com
*.class
*.dll
*.exe
*.o
*.so

# =============================================================================
# MACHINE LEARNING & DATA SCIENCE
# =============================================================================

# Jupyter Notebook checkpoints
.ipynb_checkpoints/

# Model files
*.pkl
*.pickle
*.joblib
*.h5
*.hdf5
*.onnx
*.pb

# Data files
*.csv
*.tsv
*.json
*.parquet
*.feather
data/
datasets/
*.data

# MLflow
mlruns/
mlartifacts/

# Weights & Biases
wandb/

# =============================================================================
# CLOUD & DEPLOYMENT
# =============================================================================

# AWS
.aws/
*.pem

# Google Cloud
*.json
.gcloud/

# Azure
.azure/

# Kubernetes
*.yaml
*.yml
!requirements.yml
!environment.yml

# Heroku
.env.heroku

# =============================================================================
# TESTING & COVERAGE
# =============================================================================

# Coverage reports
.coverage
.coverage.*
htmlcov/
.tox/
.nox/
.pytest_cache/
coverage.xml
*.cover
*.py,cover

# =============================================================================
# CUSTOM PROJECT FILES
# =============================================================================

# Project specific
TODO.md
NOTES.md
scratch/
temp/
experiments/
